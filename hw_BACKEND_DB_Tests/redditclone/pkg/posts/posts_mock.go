// Code generated by MockGen. DO NOT EDIT.
// Source: posts.go

// Package posts is a generated GoMock package.
package posts

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	comments "redditclone/pkg/comments"
	vote "redditclone/pkg/vote"
)

// MockPostsRepository is a mock of PostsRepository interface.
type MockPostsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPostsRepositoryMockRecorder
}

// MockPostsRepositoryMockRecorder is the mock recorder for MockPostsRepository.
type MockPostsRepositoryMockRecorder struct {
	mock *MockPostsRepository
}

// NewMockPostsRepository creates a new mock instance.
func NewMockPostsRepository(ctrl *gomock.Controller) *MockPostsRepository {
	mock := &MockPostsRepository{ctrl: ctrl}
	mock.recorder = &MockPostsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostsRepository) EXPECT() *MockPostsRepositoryMockRecorder {
	return m.recorder
}

// AddComment mocks base method.
func (m *MockPostsRepository) AddComment(arg0 string, arg1 comments.Comment) (Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddComment", arg0, arg1)
	ret0, _ := ret[0].(Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddComment indicates an expected call of AddComment.
func (mr *MockPostsRepositoryMockRecorder) AddComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddComment", reflect.TypeOf((*MockPostsRepository)(nil).AddComment), arg0, arg1)
}

// AddPost mocks base method.
func (m *MockPostsRepository) AddPost(arg0 Post) (Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPost", arg0)
	ret0, _ := ret[0].(Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPost indicates an expected call of AddPost.
func (mr *MockPostsRepositoryMockRecorder) AddPost(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPost", reflect.TypeOf((*MockPostsRepository)(nil).AddPost), arg0)
}

// DeleteComment mocks base method.
func (m *MockPostsRepository) DeleteComment(arg0, arg1 string) (Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", arg0, arg1)
	ret0, _ := ret[0].(Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockPostsRepositoryMockRecorder) DeleteComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockPostsRepository)(nil).DeleteComment), arg0, arg1)
}

// DeletePost mocks base method.
func (m *MockPostsRepository) DeletePost(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockPostsRepositoryMockRecorder) DeletePost(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockPostsRepository)(nil).DeletePost), arg0)
}

// GetAllPosts mocks base method.
func (m *MockPostsRepository) GetAllPosts() ([]Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPosts")
	ret0, _ := ret[0].([]Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPosts indicates an expected call of GetAllPosts.
func (mr *MockPostsRepositoryMockRecorder) GetAllPosts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPosts", reflect.TypeOf((*MockPostsRepository)(nil).GetAllPosts))
}

// GetByUserLogin mocks base method.
func (m *MockPostsRepository) GetByUserLogin(arg0 string) ([]Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserLogin", arg0)
	ret0, _ := ret[0].([]Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserLogin indicates an expected call of GetByUserLogin.
func (mr *MockPostsRepositoryMockRecorder) GetByUserLogin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserLogin", reflect.TypeOf((*MockPostsRepository)(nil).GetByUserLogin), arg0)
}

// GetCategory mocks base method.
func (m *MockPostsRepository) GetCategory(arg0 string) ([]Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategory", arg0)
	ret0, _ := ret[0].([]Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategory indicates an expected call of GetCategory.
func (mr *MockPostsRepositoryMockRecorder) GetCategory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategory", reflect.TypeOf((*MockPostsRepository)(nil).GetCategory), arg0)
}

// GetPostByID mocks base method.
func (m *MockPostsRepository) GetPostByID(arg0 string) (Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostByID", arg0)
	ret0, _ := ret[0].(Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostByID indicates an expected call of GetPostByID.
func (mr *MockPostsRepositoryMockRecorder) GetPostByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostByID", reflect.TypeOf((*MockPostsRepository)(nil).GetPostByID), arg0)
}

// UnVote mocks base method.
func (m *MockPostsRepository) UnVote(arg0, arg1 string) (Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnVote", arg0, arg1)
	ret0, _ := ret[0].(Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnVote indicates an expected call of UnVote.
func (mr *MockPostsRepositoryMockRecorder) UnVote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnVote", reflect.TypeOf((*MockPostsRepository)(nil).UnVote), arg0, arg1)
}

// UpdatePost mocks base method.
func (m *MockPostsRepository) UpdatePost(arg0 Post) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePost", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePost indicates an expected call of UpdatePost.
func (mr *MockPostsRepositoryMockRecorder) UpdatePost(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePost", reflect.TypeOf((*MockPostsRepository)(nil).UpdatePost), arg0)
}

// Vote mocks base method.
func (m *MockPostsRepository) Vote(arg0 string, arg1 vote.Vote) (Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Vote", arg0, arg1)
	ret0, _ := ret[0].(Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Vote indicates an expected call of Vote.
func (mr *MockPostsRepositoryMockRecorder) Vote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Vote", reflect.TypeOf((*MockPostsRepository)(nil).Vote), arg0, arg1)
}
