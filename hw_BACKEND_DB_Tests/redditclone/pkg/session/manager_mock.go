// Code generated by MockGen. DO NOT EDIT.
// Source: manager.go

// Package session is a generated GoMock package.
package session

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSessionManager is a mock of SessionManager interface.
type MockSessionManager struct {
	ctrl     *gomock.Controller
	recorder *MockSessionManagerMockRecorder
}

// MockSessionManagerMockRecorder is the mock recorder for MockSessionManager.
type MockSessionManagerMockRecorder struct {
	mock *MockSessionManager
}

// NewMockSessionManager creates a new mock instance.
func NewMockSessionManager(ctrl *gomock.Controller) *MockSessionManager {
	mock := &MockSessionManager{ctrl: ctrl}
	mock.recorder = &MockSessionManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionManager) EXPECT() *MockSessionManagerMockRecorder {
	return m.recorder
}

// AddNewSess mocks base method.
func (m *MockSessionManager) AddNewSess(ctx context.Context, id string, exp, iat int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewSess", ctx, id, exp, iat)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNewSess indicates an expected call of AddNewSess.
func (mr *MockSessionManagerMockRecorder) AddNewSess(ctx, id, exp, iat interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewSess", reflect.TypeOf((*MockSessionManager)(nil).AddNewSess), ctx, id, exp, iat)
}

// DeleteSess mocks base method.
func (m *MockSessionManager) DeleteSess(ctx context.Context, userID string, iat int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSess", ctx, userID, iat)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSess indicates an expected call of DeleteSess.
func (mr *MockSessionManagerMockRecorder) DeleteSess(ctx, userID, iat interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSess", reflect.TypeOf((*MockSessionManager)(nil).DeleteSess), ctx, userID, iat)
}

// GetExp mocks base method.
func (m *MockSessionManager) GetExp(ctx context.Context, id string, iat int64) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExp", ctx, id, iat)
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetExp indicates an expected call of GetExp.
func (mr *MockSessionManagerMockRecorder) GetExp(ctx, id, iat interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExp", reflect.TypeOf((*MockSessionManager)(nil).GetExp), ctx, id, iat)
}

// GetKey mocks base method.
func (m *MockSessionManager) GetKey() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKey")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// GetKey indicates an expected call of GetKey.
func (mr *MockSessionManagerMockRecorder) GetKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKey", reflect.TypeOf((*MockSessionManager)(nil).GetKey))
}

// SetKey mocks base method.
func (m *MockSessionManager) SetKey(arg0 interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetKey", arg0)
}

// SetKey indicates an expected call of SetKey.
func (mr *MockSessionManagerMockRecorder) SetKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetKey", reflect.TypeOf((*MockSessionManager)(nil).SetKey), arg0)
}
